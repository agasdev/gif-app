{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","evt","preventDefault","trim","length","cats","onChange","target","value","type","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uLAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAIC,iBAEAJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,2BACIO,SAhBS,SAACL,GAClBF,EAAcE,EAAIM,OAAOC,QAgBjBC,KAAK,OACLD,MAAOV,MCtBVY,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAChC,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCPHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,gDACkCO,UAAUF,GAD5C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QARvB,kBAYZY,GAZY,4CAAH,sDCMPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACZpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAU,WACNlB,EAAQC,GAAUkB,MAAK,SAAAC,GACnBH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGlB,CAACd,IAEGe,EDXyBK,CAAapB,GAAhCW,EAFsB,EAE5BL,KAAcQ,EAFc,EAEdA,QAErB,OACI,oCACI,wBAAIlB,UAAU,qCAAqCI,GAEjDc,GAAW,uBAAGlB,UAAU,oCAAb,eAEb,yBAAKA,UAAU,aACVe,EAAOH,KAAI,SAAAC,GAAG,OACX,kBAAC,EAAD,iBACQA,EADR,CAEIY,IAAKZ,EAAIC,YEfpBY,EAAS,WAAO,IAAD,EAEY1C,mBAAS,CAAC,gBAFtB,mBAEjB2C,EAFiB,KAEL5C,EAFK,KAIxB,OACI,oCACI,sCACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACK4C,EAAWf,KAAI,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACIA,SAAUA,EACVqB,IAAKrB,U,MCZ7BwB,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.6e88af55.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleChange = (evt) => {\n        setInputValue(evt.target.value);\n    }\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                onChange={handleChange}\n                type=\"text\"\n                value={inputValue}\n            />\n        </form>\n    );\n\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    );\n};\n\nGifGridItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n};\n","export const getGifs = async (category) => {\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=EMnrOuZKt8FL5k7EbGvC6qKKoKmML7hl`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { GifGridItem } from \"./GifGridItem\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({category}) => {\n\n    const {data: images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\n\n            <div className=\"card-grid\">\n                {images.map(img => (\n                    <GifGridItem\n                        {...img}\n                        key={img.id}\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from \"react\";\n\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            })\n        });\n    }, [category]);\n\n    return state;\n}\n","import React, { useState } from \"react\";\n\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifApp = () => {\n\n    const [categories, setCategories] = useState(['Dragon Ball']);\n\n    return (\n        <>\n            <h2>GifApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {categories.map(category => (\n                    <GifGrid\n                        category={category}\n                        key={category}\n                    />\n                ))}\n            </ol>\n        </>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifApp } from \"./GifApp\";\n\nimport './index.css';\n\nReactDOM.render(\n    <GifApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}